import logging
import uuid
from google.adk.agents import Agent, SequentialAgent, LoopAgent, ParallelAgent
from google.adk.tools.tool_context import ToolContext
from google.genai import types
from google.adk.tools import exit_loop
from google.adk.tools.crewai_tool import CrewaiTool
from crewai_tools import FileWriterTool

model_name = "gemini-2.5-flash-preview-04-17"

# Tools


def append_to_state(
    tool_context: ToolContext, field: str, response: str
) -> dict[str, str]:
    """Append new output to an existing state key.

    Args:
        field (str): a field name to append to
        response (str): a string to append to the field

    Returns:
        dict[str, str]: {"status": "success"}
    """
    existing_state = tool_context.state.get(field, [])
    tool_context.state[field] = existing_state + [response]
    logging.info(f"[Added to {field}] {response}")
    return {"status": "success"}


def generate_uuid() -> str:
    """Generate a UUID."""
    return str(uuid.uuid4())


# Agents

financial_planner = Agent(
    name="financial_planner",
    model=model_name,
    description="Creates detailed financial savings plans based on user goals",
    instruction="""
    You are a financial planning expert. Based on the user's goals and profile:
    1. Create a comprehensive savings plan with specific recommendations
    2. Include timeline, monthly savings targets, and strategies
    3. Use the 'append_to_state' tool to store your plan in 'FINANCIAL_PLAN'
    4. Be specific and actionable in your recommendations
    """,
    generate_content_config=types.GenerateContentConfig(
        temperature=0.3,
    ),
    tools=[append_to_state],
)

plan_validator = Agent(
    name="plan_validator",
    model=model_name,
    description="Reviews and validates financial plans, providing feedback or approval",
    instruction="""
    You are a financial plan validator. Review the financial plan and:
    1. Check if the plan is realistic and achievable
    2. Verify that it addresses the user's goals
    3. If the plan needs improvement, provide specific feedback using 'append_to_state' to store in 'VALIDATION_FEEDBACK'
    4. If the plan is good, simply respond with "APPROVED" and use 'append_to_state' to store "APPROVED" in 'VALIDATION_STATUS'
    5. Always end your response with either "NEEDS_REVISION" or "APPROVED"
    """,
    generate_content_config=types.GenerateContentConfig(
        temperature=0,
    ),
    tools=[append_to_state, exit_loop],
)

planning_workshop = LoopAgent(
    name="planning_workshop",
    description="Iterates through research and planning to create an optimal savings plan",
    sub_agents=[financial_planner, plan_validator],
    max_iterations=3,
)

write_user_data = Agent(
    name="write_user_data",
    model=model_name,
    description="Writes user data to a JSON file.",
    instruction="""
    - Use your 'append_to_state' tool to store the user's goals in 'FINANCIAL_GOALS' 
      and their personal info in 'USER_PROFILE'
    - File name is generated by 'generate_uuid' tool
    """,
    generate_content_config=types.GenerateContentConfig(
        temperature=0,
    ),
    tools=[
        CrewaiTool(
            name="file_writer_tool",
            description=("Writes a file to disk"),
            tool=FileWriterTool(),
        ),
        generate_uuid,
    ],
)

plan_summarizer = Agent(
    name="plan_summarizer",
    model=model_name,
    description="Summarizes the financial plan.",
    instruction="""
    You will be the final step of advisory team who response to user's goal.
    """,
)

financial_advisory_team = SequentialAgent(
    name="financial_advisory_team",
    description="Create a comprehensive financial savings plan and save it as a document",
    sub_agents=[planning_workshop, write_user_data, plan_summarizer],
)

root_agent = Agent(
    name="greeter",
    model=model_name,
    description="Guides users in creating personalized financial savings plans",
    instruction="""
    - Welcome the user and explain that you'll help them create a comprehensive savings plan
    - Ask them to describe:
        1. Their primary financial goal (e.g., house down payment, retirement, emergency fund, vacation)
        2. Target amount needed
    - When they respond, use the 'append_to_state' tool to store their goals in 'FINANCIAL_GOALS' 
      and their personal info in 'USER_PROFILE'
    - Once you have collected this information, the financial advisory team will take over to create their plan
    """,
    generate_content_config=types.GenerateContentConfig(
        temperature=0.5, # Greeter is friendly person. That's why need very variant response here
    ),
    tools=[append_to_state],
    sub_agents=[financial_advisory_team],
)
